// Base directory for test data
def gw_test_data_dir = "./tests/data"

params {
    goodwright_test_data {
        'samplesheets' {
            clip_samplesheet              = "${gw_test_data_dir}/samplesheets/clip-samplesheet.csv"
            clip_samplesheet_xlsx         = "${gw_test_data_dir}/samplesheets/clip-samplesheet.xlsx"
            clip_samplesheet_small        = "${gw_test_data_dir}/samplesheets/clip-samplesheet-small.csv"

            base_valid_single_pe          = "${gw_test_data_dir}/samplesheets/base_samplesheet/valid-single-sample-pe.csv"
            base_valid_single_se          = "${gw_test_data_dir}/samplesheets/base_samplesheet/valid-single-sample-se.csv"
            base_valid_multi_pe           = "${gw_test_data_dir}/samplesheets/base_samplesheet/valid-multirep-pe.csv"
            base_valid_multi_se           = "${gw_test_data_dir}/samplesheets/base_samplesheet/valid-multirep-se.csv"
            base_valid_header_exta        = "${gw_test_data_dir}/samplesheets/base_samplesheet/valid-extra-header.csv"
            base_valid_merge_rep          = "${gw_test_data_dir}/samplesheets/base_samplesheet/valid-merge-rep.csv"
            base_invalid_mixed            = "${gw_test_data_dir}/samplesheets/base_samplesheet/pe-se-mixed.csv"
            base_invalid_dot_sampleid     = "${gw_test_data_dir}/samplesheets/base_samplesheet/dot-in-sampleid.csv"
            base_invalid_dup_rows         = "${gw_test_data_dir}/samplesheets/base_samplesheet/duplicate-rows.csv"
            base_invalid_fastq_ext_error  = "${gw_test_data_dir}/samplesheets/base_samplesheet/fastq-ext-error.csv"
            base_invalid_fastq_spaces     = "${gw_test_data_dir}/samplesheets/base_samplesheet/fastq-spaces.csv"
            base_invalid_group_blank      = "${gw_test_data_dir}/samplesheets/base_samplesheet/group-blank.csv"
            base_invalid_group_spaces     = "${gw_test_data_dir}/samplesheets/base_samplesheet/group-spaces.csv"
            base_invalid_invalid_colinrow = "${gw_test_data_dir}/samplesheets/base_samplesheet/invalid-col-in-row.csv"
            base_invalid_negrepnum        = "${gw_test_data_dir}/samplesheets/base_samplesheet/neg-rep-num.csv"
            base_invalid_rep_start        = "${gw_test_data_dir}/samplesheets/base_samplesheet/rep-start-not-one.csv"

            diff_valid_condition          = "${gw_test_data_dir}/samplesheets/diff_samplesheet/valid_sample_condition.csv"
            diff_valid_condition_factor   = "${gw_test_data_dir}/samplesheets/diff_samplesheet/valid_sample_condition_with_factor.csv"
            default_header_content        = "${gw_test_data_dir}/samplesheets/diff_samplesheet/default_header_content.csv"
            default_header_num            = "${gw_test_data_dir}/samplesheets/diff_samplesheet/default_header_check_num.csv"
            row_check_dots                = "${gw_test_data_dir}/samplesheets/diff_samplesheet/row_check_dots.csv"
            row_check_num_col             = "${gw_test_data_dir}/samplesheets/diff_samplesheet/row_check_num_col.csv"
            row_check_num_content         = "${gw_test_data_dir}/samplesheets/diff_samplesheet/row_check_num_content.csv"
            row_check_spaces_1            = "${gw_test_data_dir}/samplesheets/diff_samplesheet/row_check_spaces_1.csv"
            row_check_spaces_2            = "${gw_test_data_dir}/samplesheets/diff_samplesheet/row_check_spaces_2.csv"
            sample_notin_counts           = "${gw_test_data_dir}/samplesheets/diff_samplesheet/sample_notin_counts.csv"
            dup_rows                      = "${gw_test_data_dir}/samplesheets/diff_samplesheet/check_dup_rows.csv"
        }
        'excel' {
            small_xlsx = "${gw_test_data_dir}/small_excel.xlsx"
            small_xls  = "${gw_test_data_dir}/small_excel.xls"
        }
        'genome' {
            mm10_blacklist     = "${gw_test_data_dir}/genome/mm10-blacklist.bed"
            mm10_blacklist_gz  = "${gw_test_data_dir}/genome/mm10-blacklist.bed.gz"
            gencode35_gtf_gz   = "${gw_test_data_dir}/genome/gencode.v35.chr21.gtf.gz"
            gencode35_gtf      = "${gw_test_data_dir}/genome/gencode.v35.chr21.gtf"
            chr21_fasta        = "${gw_test_data_dir}/genome/homosapien-hg37-chr21.fa.gz"
            chr21_fai          = "${gw_test_data_dir}/genome/homosapien-hg37-chr21.fa.fai"
            longest_transcript = "${gw_test_data_dir}/genome/longest_transcript.txt"
        }
        'aligners' {
            bowtie2_index_tar             = "${gw_test_data_dir}/genome/indexes/bowtie2.tar.gz"
            bowtie1_index_tar             = "${gw_test_data_dir}/genome/indexes/bowtie.tar.gz"
            star_index_tar                = "${gw_test_data_dir}/genome/indexes/star.tar.gz"
            hs_smallrna_bowtie2_index_tar = "${gw_test_data_dir}/genome/indexes/small_rna/bowtie2.tar.gz"
            hs_smallrna_bowtie1_index_tar = "${gw_test_data_dir}/genome/indexes/small_rna/bowtie.tar.gz"
        }
        'ultraplex' {
            barcodes           = "${gw_test_data_dir}/ultraplex/barcodes.csv"
            multiplexed_fastq  = "${gw_test_data_dir}/ultraplex/multiplexed.fastq.gz"
            multiplexed_fastq2 = "${gw_test_data_dir}/ultraplex/multiplexed2.fastq.gz"
        }
        'icount' {
            segmented_gtf          = "${gw_test_data_dir}/icount/gencode.seg.gtf"
            segmented_filtered_gtf = "${gw_test_data_dir}/icount/gencode.seg.filt.gtf"
            seg_res_gtf_gz         = "${gw_test_data_dir}/icount/icount_gencode.resolved.gtf.gz"
            seg_resoth_gtf_gz      = "${gw_test_data_dir}/icount/icount_gencode.resolved_other.gtf.gz"
            sigxls_gz              = "${gw_test_data_dir}/icount/test.sigxls.bed.gz"
        }
        'clip' {
            sample_1         = "${gw_test_data_dir}/clip/ultraplex_demux_Sample1.fastq.gz"
            sample_2         = "${gw_test_data_dir}/clip/ultraplex_demux_Sample2.fastq.gz"
            bam              = "${gw_test_data_dir}/clip/alignments.bam"
            bai              = "${gw_test_data_dir}/clip/alignments.bam.bai"
            fai              = "${gw_test_data_dir}/clip/alignments.fa.fai"
            crosslinks       = "${gw_test_data_dir}/clippy/clippy.bed"
            crosslinks2      = "${gw_test_data_dir}/clip/crosslinks.bed"
            seg_gtf          = "${gw_test_data_dir}/clippy/clippy.gtf"
            clippy_fai       = "${gw_test_data_dir}/clippy/clippy.fai"
            clippy_peaks     = "${gw_test_data_dir}/clippy/peaks.bed"
            paraclu_bed      = "${gw_test_data_dir}/paraclu/paraclu.bed"
            paraclu_tsv      = "${gw_test_data_dir}/paraclu/paraclu.sigxls.tsv"
            bam_2            = "${gw_test_data_dir}/clip/sample_1_R1.transcript.raw.bam"
            bai_2            = "${gw_test_data_dir}/clip/sample_1_R1.transcript.raw.bam.bai"
        }
        'umitools' {
            bam      = "${gw_test_data_dir}/umitools/transcriptome.bam"
            bai      = "${gw_test_data_dir}/umitools/transcriptome.bam.bai"
            umi_bam  = "${gw_test_data_dir}/umitools/transcriptome-umi.bam"
        }
        'clipqc' {
            premap   = "${gw_test_data_dir}/clipqc/sample_1_R1.out"
            mapped   = "${gw_test_data_dir}/clipqc/sample_1_R1.Log.final.out"
            collapse = "${gw_test_data_dir}/clipqc/sample_1_R1.genome.dedup_UMICollapse.log"
            xlinks   = "${gw_test_data_dir}/clipqc/sample_1_R1.genome.crosslinks.bed"
            icount   = "${gw_test_data_dir}/clipqc/sample_1_R1.icount.peaks.bed"
            paraclu  = "${gw_test_data_dir}/clipqc/sample_1_R1.paraclu.peaks.bed"
            clippy   = "${gw_test_data_dir}/clipqc/sample_1_R1.clippy.peaks.bed"
        }
        'count_matrix' {
            simple   = "${gw_test_data_dir}/count_matrix/simple_matrix.csv"
            simple_6 = "${gw_test_data_dir}/count_matrix/simple_matrix_6_samples.csv"
        }
        'deseq2' {
            salmon_counts       = "${gw_test_data_dir}/r/deseq2/salmon.merged.gene_counts.tsv"
            sample_cond_only    = "${gw_test_data_dir}/r/deseq2/test_salmon_condition_only.csv"
            sample_multi_factor = "${gw_test_data_dir}/r/deseq2/test_salmon_multi_factor.csv"
            rds_condition       = "${gw_test_data_dir}/r/deseq2/condition-A-B.dds.rld.rds"
        }
    }
}
