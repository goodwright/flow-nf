params {
    star_index                      = null
    bowtie2_index                   = null
    fasta_fai                       = null
    filtered_gtf                    = null
    chrom_sizes                     = null                    
    smrna_fasta_fai                 = null                        
    smrna_chrom_sizes               = null                          
    longest_transcript              = null                           
    longest_transcript_fai          = null
    longest_transcript_gtf          = null                              
    seg_gtf                         = null                
    seg_filt_gtf                    = null                     
    seg_resolved_gtf                = null                         
    seg_resolved_gtf_genic          = null                               
    regions_gtf                     = null                    
    regions_filt_gtf                = null                         
    regions_resolved_gtf            = null                             
    regions_resolved_gtf_genic      = null 
}

process {
        withName: 'UNTAR_.*' {
            ext.args2 = '--no-same-owner'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:REMOVE_GTF_BRACKETS' {
            ext.cmd1 = "sed 's/)/_/g' | sed 's/(/_/g'"
            ext.ext = 'gtf'
            ext.suffix = '_bracketsremoved'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_GTF' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_FILTGTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_GENIC_OTHER_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_INDEX:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_INDEX:BOWTIE_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }
}
